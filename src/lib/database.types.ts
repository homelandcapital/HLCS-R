
// This file will be auto-generated by Supabase CLI after introspection.
// For now, it's a placeholder.
// You would run: supabase gen types typescript --project-id YOUR_PROJECT_ID --schema public > src/lib/database.types.ts
// Or use the "Generate types" button in the Supabase Dashboard Table Editor.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      users: {
        Row: {
          id: string // UUID, PK, references auth.users.id
          created_at: string // TIMESTAMPTZ
          updated_at: string // TIMESTAMPTZ
          name: string // TEXT
          email: string // TEXT, unique
          avatar_url: string | null // TEXT
          role: "agent" | "user" | "platform_admin" // user_role_enum
          phone: string | null // TEXT
          agency: string | null // TEXT
          savedPropertyIds?: string[] | null // This is a local client-side convenience, actual data in saved_properties table
        }
        Insert: {
          id: string // UUID, PK, references auth.users.id
          created_at?: string // TIMESTAMPTZ
          updated_at?: string // TIMESTAMPTZ
          name: string // TEXT
          email: string // TEXT, unique
          avatar_url?: string | null // TEXT
          role: "agent" | "user" | "platform_admin" // user_role_enum
          phone?: string | null // TEXT
          agency?: string | null // TEXT
        }
        Update: {
          id?: string
          created_at?: string
          updated_at?: string
          name?: string
          email?: string
          avatar_url?: string | null
          role?: "agent" | "user" | "platform_admin"
          phone?: string | null
          agency?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "users_id_fkey"
            columns: ["id"]
            referencedRelation: "users" // Supabase internal auth.users table
            referencedColumns: ["id"]
          }
        ]
      }
      properties: {
        Row: {
          id: string // UUID, PK
          created_at: string // TIMESTAMPTZ
          updated_at: string // TIMESTAMPTZ
          title: string // TEXT
          description: string // TEXT
          price: number // NUMERIC
          listing_type: "For Sale" | "For Rent" | "For Lease" // listing_type_enum
          location_area_city: string // TEXT
          state: string // nigerian_state_enum
          address: string // TEXT
          property_type: "House" | "Apartment" | "Condo" | "Townhouse" | "Land" // property_type_enum
          bedrooms: number // INTEGER
          bathrooms: number // INTEGER
          area_sq_ft: number | null // INTEGER
          images: Json | null // JSONB, array of Cloudinary image URLs
          agent_id: string // UUID, FK to users.id
          status: "pending" | "approved" | "rejected" // property_status_enum
          rejection_reason: string | null // TEXT
          amenities: Json | null // JSONB, array of amenity strings
          year_built: number | null // INTEGER
          coordinates_lat: number | null // NUMERIC
          coordinates_lng: number | null // NUMERIC
          is_promoted: boolean | null // BOOLEAN
          promotion_tier_id: string | null // TEXT
          promotion_tier_name: string | null // TEXT
          promoted_at: string | null // TIMESTAMPTZ
        }
        Insert: {
          id?: string // UUID, PK
          created_at?: string // TIMESTAMPTZ
          updated_at?: string // TIMESTAMPTZ
          title: string // TEXT
          description: string // TEXT
          price: number // NUMERIC
          listing_type: "For Sale" | "For Rent" | "For Lease"
          location_area_city: string // TEXT
          state: string
          address: string // TEXT
          property_type: "House" | "Apartment" | "Condo" | "Townhouse" | "Land"
          bedrooms?: number // INTEGER
          bathrooms?: number // INTEGER
          area_sq_ft?: number | null // INTEGER
          images?: Json | null // JSONB
          agent_id: string // UUID, FK to users.id
          status?: "pending" | "approved" | "rejected"
          rejection_reason?: string | null // TEXT
          amenities?: Json | null // JSONB
          year_built?: number | null // INTEGER
          coordinates_lat?: number | null // NUMERIC
          coordinates_lng?: number | null // NUMERIC
          is_promoted?: boolean | null // BOOLEAN
          promotion_tier_id?: string | null // TEXT
          promotion_tier_name?: string | null // TEXT
          promoted_at?: string | null // TIMESTAMPTZ
        }
        Update: {
          id?: string
          created_at?: string
          updated_at?: string
          title?: string
          description?: string
          price?: number
          listing_type?: "For Sale" | "For Rent" | "For Lease"
          location_area_city?: string
          state?: string
          address?: string
          property_type?: "House" | "Apartment" | "Condo" | "Townhouse" | "Land"
          bedrooms?: number
          bathrooms?: number
          area_sq_ft?: number | null
          images?: Json | null
          agent_id?: string
          status?: "pending" | "approved" | "rejected"
          rejection_reason?: string | null
          amenities?: Json | null
          year_built?: number | null
          coordinates_lat?: number | null
          coordinates_lng?: number | null
          is_promoted?: boolean | null
          promotion_tier_id?: string | null
          promotion_tier_name?: string | null
          promoted_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "properties_agent_id_fkey"
            columns: ["agent_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      inquiries: {
        Row: {
          id: string // UUID, PK
          created_at: string // TIMESTAMPTZ
          updated_at: string // TIMESTAMPTZ
          property_id: string // UUID, FK to properties.id
          property_name: string // TEXT
          inquirer_user_id: string | null // UUID, FK to users.id
          inquirer_name: string // TEXT
          inquirer_email: string // TEXT
          inquirer_phone: string | null // TEXT
          initial_message: string // TEXT
          status: "new" | "contacted" | "resolved" | "archived" // inquiry_status_enum
        }
        Insert: {
          id?: string // UUID, PK
          created_at?: string // TIMESTAMPTZ
          updated_at?: string // TIMESTAMPTZ
          property_id: string // UUID, FK to properties.id
          property_name: string // TEXT
          inquirer_user_id?: string | null // UUID, FK to users.id
          inquirer_name: string // TEXT
          inquirer_email: string // TEXT
          inquirer_phone?: string | null // TEXT
          initial_message: string // TEXT
          status?: "new" | "contacted" | "resolved" | "archived"
        }
        Update: {
          // Similar to Insert, all optional
          id?: string
          created_at?: string
          updated_at?: string
          property_id?: string
          property_name?: string
          inquirer_user_id?: string | null
          inquirer_name?: string
          inquirer_email?: string
          inquirer_phone?: string | null
          initial_message?: string
          status?: "new" | "contacted" | "resolved" | "archived"
        }
        Relationships: [
          {
            foreignKeyName: "inquiries_property_id_fkey"
            columns: ["property_id"]
            referencedRelation: "properties"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "inquiries_inquirer_user_id_fkey"
            columns: ["inquirer_user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      inquiry_messages: {
        Row: {
          id: string // UUID, PK
          created_at: string // TIMESTAMPTZ
          inquiry_id: string // UUID, FK to inquiries.id
          sender_user_id: string | null // UUID, FK to users.id
          sender_name: string // TEXT
          sender_role: "agent" | "user" | "platform_admin" // user_role_enum
          content: string // TEXT
        }
        Insert: {
          id?: string
          created_at?: string
          inquiry_id: string
          sender_user_id?: string | null
          sender_name: string
          sender_role: "agent" | "user" | "platform_admin"
          content: string
        }
        Update: { /* ... */ }
        Relationships: [
          {
            foreignKeyName: "inquiry_messages_inquiry_id_fkey"
            columns: ["inquiry_id"]
            referencedRelation: "inquiries"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "inquiry_messages_sender_user_id_fkey"
            columns: ["sender_user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      saved_properties: {
        Row: {
          user_id: string // UUID, PK, FK to users.id
          property_id: string // UUID, PK, FK to properties.id
          created_at: string // TIMESTAMPTZ
        }
        Insert: {
          user_id: string
          property_id: string
          created_at?: string
        }
        Update: { /* Typically not updated, only inserted/deleted */ }
        Relationships: [
          {
            foreignKeyName: "saved_properties_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "saved_properties_property_id_fkey"
            columns: ["property_id"]
            referencedRelation: "properties"
            referencedColumns: ["id"]
          }
        ]
      }
      platform_settings: {
        Row: {
          id: number // INTEGER, PK (should only be 1 row with id=1)
          updated_at: string // TIMESTAMPTZ
          promotions_enabled: boolean | null
          promotion_tiers: Json | null // JSONB of PromotionTierConfig[]
          site_name: string | null
          default_currency: string | null
          maintenance_mode: boolean | null
          notification_email: string | null
          predefined_amenities: string | null
        }
        Insert: { /* ... */ }
        Update: { /* ... */ }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      user_role_enum: "agent" | "user" | "platform_admin"
      property_status_enum: "pending" | "approved" | "rejected"
      listing_type_enum: "For Sale" | "For Rent" | "For Lease"
      property_type_enum: "House" | "Apartment" | "Condo" | "Townhouse" | "Land"
      nigerian_state_enum: string // You would list all states here if strictly typed
      inquiry_status_enum: "new" | "contacted" | "resolved" | "archived"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// Helper type for user profile data stored in our public.users table
export type UserProfile = Database['public']['Tables']['users']['Row'];
